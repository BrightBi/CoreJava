#!/bin/bash
# -------------------------------------------------------------------------
# This is the Unix startup script for the application
# -------------------------------------------------------------------------

PID_FILE=".pid"

DEBUG=0
SUSPEND=n
BACKGROUND=1
TEST_SCRIPT=0
TRACE=0
JAVA_OPTS='-javaagent:/opt/AppDynamics/AppServerAgent/javaagent.jar'
USER_JAVA_OPTS=''
DEFAULT_MONITORING_SUPPORT_COLLECTD_CLIENT_PATH=/opt/active/collectd-service/junixsocket
DEFAULT_MONITORING_SUPPORT_COLLECTD_DATA_CHANNEL=udpSender
VERBOSE=0
DRY_RUN=0

error() {
  if [ $# -gt 0 ]; then
    msg="ERROR: $1"
    shift
  else
    msg="ERROR"
  fi
  echo "$msg"
  while [ $# -gt 0 ]; do
    msg="$1"
    shift
    echo "   $msg"
  done
  exit 1
}

verbose() {
    if [ $VERBOSE -gt 0 ]; then
        echo "$@" >&2
    fi
}


help() {
    echo ""
    echo "This script reads properties from config/system.properties"
    echo "and starts the application"
    echo ""
    sed -n -e '/) \#\#/d' -e '1,/\#\# handle commands/d' \
      -e '/\#\# done handle commands/,10000d' \
      -e 's:^[ \t]*\([^(]*\)):  \1:p' \
      -e 's:^[ \t]*##[ \t]*\(.*\):      \1:p'  "$0"
}



get_var()
{
    sed -n -e "s/^$1=//p" service.properties | tr -d '\n\r'
}


get_var_with_default()
{
    RESULT=$(grep "^$1=" service.properties)
    if [ "$RESULT" ]; then
        verbose "$1 $RESULT"
        echo "$RESULT" | sed -e "s/^$1=//" | tr -d '\n\r'
    else
        printf -- "$2"
    fi
}


tools_path() {
    TOOLS_JAR="${JAVA_HOME}/lib/tools.jar"

    if [ ! -f "$TOOLS_JAR" ]; then
        case "`uname`" in
            Darwin*)
                TOOLS_JAR="${JAVA_HOME}/../Classes/classes.jar"
                ;;
        esac
    fi
    if [ ! -f "$TOOLS_JAR" ]; then
        error "tools.jar not found"
    fi
}


get_pid() {
    if [ ! -f .pid ]; then
        error ".pid missing. Is app running?"
    fi
    PID=`cat .pid`
}


full_path() {
    if [ -d "$1" ]; then
        ( cd "$1" >/dev/null 2>&1 ; pwd )
    else
        error "bad dir: $1"
    fi
}


btrace_install() {
    echo "installing btrace probe using args: $@"
    tools_path
    get_pid
    "$JAVA_HOME/bin/java" -Dcom.sun.btrace.probeDescPath=. \
        -Dcom.sun.btrace.dumpClasses=false \
        -Dcom.sun.btrace.debug=false \
        -Dcom.sun.btrace.unsafe=false \
        -classpath ./btrace/*:../lib/*:${TOOLS_JAR} com.sun.btrace.client.Main $PID "$@"

    ## TODO I may want to tail the btrace file here.
    exit
}


# Use value set in service.properties. If it cannot be used, use JAVA_HOME.
check_java_home() {
  JAVA_VERSION=$(get_var jdk.version)

  if [ "$JAVA_VERSION" ]; then
    # linux location
    if [ -d "/usr/java/$JAVA_VERSION" ]; then
      export JAVA_HOME="/usr/java/$JAVA_VERSION"
      echo "setting JAVA_HOME=$JAVA_HOME"
    else
      echo "WARNING: does not exist: /usr/java/$JAVA_VERSION  Not setting JAVA_HOME."
    fi
  elif [ -z "$JAVA_HOME" ]; then
    error "JAVA_HOME is not set"
  fi

  # check java_home exists
  if [ ! -d "$JAVA_HOME" ]; then
    error "Invalid JAVA_HOME: $JAVA_HOME"
  fi

  # check java runnable
  "$JAVA_HOME/bin/java" -version || error "bad java"
}


######
######    Functions that can be overridden in custom_start.sh
######


custom_init() {
  true
}

custom_arg() {
  true
}

custom_pre_exec() {
  true
}


######    End of custom_start.sh functions


CONFIG_DIR=`dirname "$0"`
CONFIG_DIR=`full_path "$CONFIG_DIR"`

cd "$CONFIG_DIR"

if [ -f "custom_start.sh" ]; then
  echo "Loading start extensions: custom_start.sh"
  . ./custom_start.sh
fi


custom_init || error "custom_init failed"

## handle commands
while [ $# -gt 0 ];
do
    arg=$1
    shift
    case "$arg" in
        -dry-run | --dry-run)
            ## Output options and exit
            DRY_RUN=1
            ;;

        -verbose)
            ## Enable verbose script output
            VERBOSE=1
            ;;

        -debug | --debug | -d)
            ## Enable debugging in process.
            DEBUG=1
            ;;

        -suspend | --suspend)
            ## Suspend process until debugger attaches.
            SUSPEND=y
            ;;

        --test)
            ## internal testing
            TEST_SCRIPT=1
            ;;

        -foreground | --foreground | -f)
            ## Run in forground and log to attached terminal.
            BACKGROUND=0
            ;;

        -trace | -t)
            ## Install btrace probes located in config/trace on start.
            TRACE=1
            ;;

        -btrace | --btrace)
            ## Install new btrace class into running application. The process must be runn
ing.
            ## All arguments after the option are passed to btrace.
            ## Be aware that this will not start the application and other options have no
 effect when
            ## combined with this option.
            btrace_install "$@"
            ;;

        -D*)
            ## define system property in JVM (same syntax as java)
            USER_JAVA_OPTS="$USER_JAVA_OPTS $arg"
            ;;

         -J)
            ## pass arg to jvm (ex: -J -XX:MaxPermGen=1g)
            arg="$1"
            shift
            USER_JAVA_OPTS="$USER_JAVA_OPTS $arg"
            ;;

         -J*)
            ## pass arg to jmv (ex: -J-XX:MaxPermGen=1g)
            arg="`echo $arg | sed 's/^-J//'`"
            USER_JAVA_OPTS="$USER_JAVA_OPTS $arg"
            ;;

         -help | -h | -? | --help)
            ## print help
            help
            exit 1
            ;;

        *)
            ## error out for unknown command
            custom_arg "$arg" || error "bad arg: $arg"
            ;;
    esac
done
## done handle commands

check_java_home

JAVA_HOME_VERSION=$($JAVA_HOME/bin/java -version 2>&1 | sed -n -e 's/java version "1\.\([^
\.]*\)\..*/\1/p')

if [ -f "$PID_FILE" ]; then
    ./stop_service.sh
fi

tools_path

SYS_PROPS="$(sed -n -e 's#^sysprop\.#-D#p' service.properties | tr '\n\r' ' ')"
JAVA_OPTS="$SYS_PROPS $JAVA_OPTS"

# ### START Custom Config ###
APP_NAME=$(get_var appName)
APP_NAME="${APP_NAME}$(get_var appInstance)"
HOME_DIR=$(get_var homeDir)
JMX_PORT=$(get_var jmxPort)
LOG_DIR=$(get_var logDir)
LOG_LEVEL=$(get_var logLevel)
LOGGING_CONFIG_FILE=$(get_var loggingConfigFile)
MEMORY_SIZE=$(get_var memorySize)
MORE_JAVA_OPTIONS=$(get_var moreJavaOptions)
ENVIRONMENT=$(get_var environment)
JVM_NEW_PERCENT=$(get_var jvm.memory.new.percent)
JVM_MEMORY_BITS=$(get_var_with_default jvm.memory.bits 32)
JVM_MEMORY_PERMGEN=$(get_var jvm.memory.permgen)
JVM_GC=$(get_var_with_default jvm.gc '-XX:+UseConcMarkSweepGC')
USER_TIMEZONE=$(get_var_with_default sysprop.user.timezone UTC)
USER_LANGUAGE=$(get_var_with_default sysprop.user.language en)
USER_COUNTRY=$(get_var_with_default sysprop.user.country US)
MONITORING_SUPPORT_ENABLED=$(get_var_with_default monitoring.support.enabled false)
MONITORING_SUPPORT_COLLECTD_CLIENT_PATH=$(get_var_with_default monitoring.support.collectd
.client.path "$DEFAULT_MONITORING_SUPPORT_COLLECTD_CLIENT_PATH")
MONITORING_SUPPORT_COLLECTD_DATA_CHANNEL=$(get_var_with_default monitoring.support.collect
d.dataChannel "$DEFAULT_MONITORING_SUPPORT_COLLECTD_DATA_CHANNEL")
APP_DYNAMICS_ENABLED=$(get_var_with_default app_dynamics.enable 0)

SHARED_FILE_LOCATION=/awcontent/common-config
HIBERNATE_USE_NATURAL_FIRST_RESULT=$(get_var_with_default hibernate.useNaturalFirstResult 
true)


# ### END Custom Config ###

if [ $TEST_SCRIPT -eq 1 ]; then
    echo "appName=$APP_NAME"
    echo "homeDir=$HOME_DIR"
    echo "jmxPort=$JMX_PORT"
    echo "logDir=$LOG_DIR"
    echo "logLevel=$LOG_LEVEL"
    echo "logConfigFile=$LOGGING_CONFIG_FILE"
    echo "memorySize=$MEMORY_SIZE"
    echo "moreJavaOptions=$MORE_JAVA_OPTIONS"
    echo "monitoring.support.enabled=$MONITORING_SUPPORT_ENABLED"
    echo "hibernate.useNaturalFirstResult=$HIBERNATE_USE_NATURAL_FIRST_RESULT"
fi


JAVA_OPTS="$JAVA_OPTS \
    -DappName=${APP_NAME} \
    -Denv=${ENVIRONMENT} \
    -Dconfig_dir=${CONFIG_DIR} \
    -Dhome_dir=${HOME_DIR} \
    -Dapp_log_dir=${LOG_DIR} \
    -Dlog_level=${LOG_LEVEL} \
    -Dlogging_config_file=${LOGGING_CONFIG_FILE} \
    -Dassembly=assembly.xml \
    -Djava.awt.headless=true \
    -Duser.timezone=${USER_TIMEZONE} \
    -Duser.language=${USER_LANGUAGE} \
    -Duser.country=${USER_COUNTRY} \
    -Dhibernate.useNaturalFirstResult=${HIBERNATE_USE_NATURAL_FIRST_RESULT}"

if [ "$APP_DYNAMICS_ENABLED" -eq 1 ]; then
  echo "enabling appd" 1>&2
  JAVA_OPTS="-javaagent:/opt/AppDynamics/AppServerAgent/javaagent.jar $JAVA_OPTS"
fi

if [ "$MONITORING_SUPPORT_ENABLED" = "true" -a "$MONITORING_SUPPORT_COLLECTD_DATA_CHANNEL"
 = "socketSender" ] ; then
    JAVA_OPTS="$JAVA_OPTS -Djava.library.path=$MONITORING_SUPPORT_COLLECTD_CLIENT_PATH
"
fi

CLASS_NAME="com.active.services.core.server.DefaultServer"
DEBUG_PORT="5005"
TRACE_OPTS=""


if [ -z "$JAVA_HOME" ] ; then
    error "The environment variable 'JAVA_HOME' has not been set.  Please do this and then
 execute this script again."
fi

if [ ! -d $LOG_DIR ] ; then
    mkdir $LOG_DIR
fi

if [ $TRACE -ne 0 ]; then
    TRACE_OPTS="-javaagent:btrace/btrace-agent.jar=scriptdir=trace"
fi

[ -f ./default.log ] || [ -h ./default.log ] || ln -s "$LOG_DIR/$APP_NAME.log" default.log

echo "-"
echo "- Starting -"
echo "-"
echo "* Logging information may be found in ${LOG_DIR}/${APP_NAME}.log *"

if [ "$JVM_MEMORY_BITS" = "32" ]; then
    JAVA_OPTS="${JAVA_OPTS} -d32"
elif [ "$JVM_MEMORY_BITS" = "64" ]; then
    JAVA_OPTS="${JAVA_OPTS} -d64"
else
    error "Invalid size specified for jvm.memory.bits. Must be 32 or 64. |$JVM_MEMORY_BITS
|"
fi




CP="${HOME_DIR}/lib/*:${HOME_DIR}/jetty/lib/*:${HOME_DIR}/config:${HOME_DIR}/jetty:${TOOLS
_JAR}:${SHARED_FILE_LOCATION}/i18n-address-config/common-config"


GC_LOGGING="-verbose:gc -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -Xloggc:${LOG_DIR}/${AP
P_NAME}-gc.log"

PERM_GEN=
if [ "$JVM_MEMORY_PERMGEN" ]; then
    if [ "$JAVA_HOME_VERSION" -lt 8 ]; then
        PERM_GEN="-XX:MaxPermSize=$JVM_MEMORY_PERMGEN -XX:PermSize=$JVM_MEMORY_PERMGEN"
    elif [ "$JAVA_HOME_VERSION" -ge 8 ]; then
        PERM_GEN="-XX:MaxMetaspaceSize=$JVM_MEMORY_PERMGEN"
    fi
fi

# determine new size
case "$MEMORY_SIZE" in
    *m | *M)
        MEM_BASE=`echo "$MEMORY_SIZE" | sed -e 's/[Mm]$//'`
        ;;

    *g | *G)
        MEM_BASE=`echo "$MEMORY_SIZE" | sed -e 's/[Gg]$//'`
        MEM_BASE=`expr $MEM_BASE * 1024`
        ;;

    *)
        echo "Error: Invalid memory size: $MEMORY_SIZE"
        exit 1
        ;;
esac

if [ "$JVM_NEW_PERCENT" ]; then
    NEW_SIZE=$(($MEM_BASE * $JVM_NEW_PERCENT / 100))
    NEW_SIZE="${NEW_SIZE}M"

    JAVA_OPTS="${JAVA_OPTS} \
      -XX:NewSize=$NEW_SIZE \
      -XX:MaxNewSize=$NEW_SIZE"

fi

JAVA_OPTS="${JAVA_OPTS} \
    ${MEM_OPT} \
    -ea \
    -Xms${MEMORY_SIZE} \
    -Xmx${MEMORY_SIZE} \
    ${PERM_GEN} \
    -Dfile.encoding=UTF-8 \
    -XX:+HeapDumpOnOutOfMemoryError \
    -Djava.net.preferIPv4Stack=true \
    -Dcom.sun.management.jmxremote.port=${JMX_PORT} \
    -Dcom.sun.management.jmxremote.authenticate=false \
    -Dcom.sun.management.jmxremote.ssl=false"


if [ $DEBUG -eq 1 ] ; then
    JAVA_OPTS="-Xdebug \
        -Xnoagent \
        -Djava.compiler=NONE \
        -Xrunjdwp:transport=dt_socket,server=y,address=${DEBUG_PORT},suspend=$SUSPEND \
        ${JAVA_OPTS}"
fi

custom_pre_exec || error "custom_pre_exec failed"

if [ ${VERBOSE} -gt 0 ]; then
    echo ${JAVA_OPTS}
fi


if [ $DRY_RUN -eq 1 ]; then
    echo $JAVA_HOME/bin/java $TRACE_OPTS \
        $JAVA_OPTS -classpath "$CP" \
        ${JVM_GC} ${GC_LOGGING} ${MORE_JAVA_OPTIONS} ${USER_JAVA_OPTS} $CLASS_NAME
    exit 1
elif [ $BACKGROUND -eq 1 ]; then
    JAVA_OPTS="${JAVA_OPTS} -Dfnd.console.log.disable=true"
    $JAVA_HOME/bin/java $TRACE_OPTS \
        $JAVA_OPTS -classpath "$CP" \
        ${JVM_GC} ${GC_LOGGING} ${MORE_JAVA_OPTIONS} ${USER_JAVA_OPTS} $CLASS_NAME </dev/n
ull >/dev/null 2>&1 &
    PID=$!
    echo "$PID" >> $PID_FILE
else
    JAVA_OPTS="${JAVA_OPTS} -Dfnd.console.log.disable=false"
    echo $$ >> $PID_FILE
    exec $JAVA_HOME/bin/java $TRACE_OPTS \
        $JAVA_OPTS -classpath "$CP" \
        ${JVM_GC} ${GC_LOGGING} ${MORE_JAVA_OPTIONS} ${USER_JAVA_OPTS} $CLASS_NAME
fi
